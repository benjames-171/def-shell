local data = require "main.data"

function init(self)
	self.tile_pred = render.predicate({"tile"})
	self.gui_pred = render.predicate({"gui"})
	self.text_pred = render.predicate({"text"})
	self.particle_pred = render.predicate({"particle"})

	self.clear_color = vmath.vector4()
	self.clear_color.x = sys.get_config("render.clear_color_red", 0)
	self.clear_color.y = sys.get_config("render.clear_color_green", 0)
	self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
	self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

	self.view = vmath.matrix4()

	data.SCR_W = render.get_width()
	data.SCR_H = render.get_height()
	data.CANV_W = data.SCR_W / data.PIXEL_SIZE
	data.CANV_H = data.SCR_H / data.PIXEL_SIZE
	data.offset = vmath.vector3(data.CANV_W / 2, data.CANV_H / 2, 0)
end

function update(self)
	local ASPECT_RATIO = render.get_width() / render.get_height()
	local w = render.get_window_width()
	local h = render.get_window_height()
	local sx = 0
	local sy = 0
	local ar = w/h
	
	if ar > ASPECT_RATIO then
		sx = (w - (h * ASPECT_RATIO)) / 2
		w = h * ASPECT_RATIO
	elseif ar < ASPECT_RATIO then
		sy = (h - (w / ASPECT_RATIO)) / 2
		h = w / ASPECT_RATIO
	end

	render.set_depth_mask(true)
	render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
	
	render.set_viewport(math.ceil(sx), math.ceil(sy), math.ceil(w), math.ceil(h))
	render.set_view(self.view)

	render.set_depth_mask(false)
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
	render.disable_state(render.STATE_CULL_FACE)

	render.set_projection(vmath.matrix4_orthographic(0, render.get_width() / data.PIXEL_SIZE, 0, render.get_height() / data.PIXEL_SIZE, -1, 1))

	render.draw(self.tile_pred)
	render.draw(self.particle_pred)
	render.draw_debug3d()

	render.set_view(vmath.matrix4())
	render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))

	render.enable_state(render.STATE_STENCIL_TEST)
	render.draw(self.gui_pred)
	render.draw(self.text_pred)
	render.disable_state(render.STATE_STENCIL_TEST)

	render.set_depth_mask(false)
end

function on_message(self, message_id, message)
	if message_id == hash("clear_color") then
		self.clear_color = message.color
	elseif message_id == hash("set_view_projection") then
		self.view = message.view
	end
end
